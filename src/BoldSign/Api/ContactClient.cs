// <copyright file="ContactClient.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net.Http;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using BoldSign.Api.Model;
    using BoldSign.Api.Resources;
    using BoldSign.Model;
    using Newtonsoft.Json;

    /// <summary>
    ///    Represents a function to interact with the API endpoints. The function perform action such as getting the Api credit details and so on.
    /// </summary>
    public class ContactClient : IContactClient
    {
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactClient" /> class.
        /// </summary>
        /// <param name="basePath">A basePath.</param>
        public ContactClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactClient" /> class.
        /// </summary>
        public ContactClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        public ContactClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="ContactClient"/> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient.</param>
        public ContactClient(ApiClient apiClient)
        {
            if (apiClient == null)
            {
                throw new ArgumentNullException(nameof(apiClient));
            }

            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Gets or sets provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(ApiValidationMessages.ExceptionFactoryUnsupported);
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        ///     Gets the base path of the API client.
        /// </summary>
        /// <value>The base path.</value>
        /// <returns>base path.</returns>
        public string GetBasePath() => this.Configuration.ApiClient.HttpClient.BaseAddress.AbsoluteUri;

        /// <summary>
        /// Gets the contact list.
        /// </summary>
        /// <param name="page">The page number.</param>
        /// <param name="pageSize">The page size.</param>
        /// <param name="searchKey">The search key.</param>
        /// <param name="contactType">contactType.</param>
        /// <returns>A Task.</returns>
        public ContactsList ListContacts(int page, int? pageSize = default, string searchKey = default,
            ContactType? contactType = ContactType.AllContacts)
        {
            var localVarResponse = this.ListContactsWithHttpInfo(page, pageSize, searchKey, contactType);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact list.
        /// </summary>
        /// <param name="page">The page number.</param>
        /// <param name="pageSize">The page size.</param>
        /// <param name="searchKey">The search key.</param>
        /// <param name="contactType">contactType.</param>
        /// <returns>A Task.</returns>
        public ApiResponse<ContactsList> ListContactsWithHttpInfo(int page, int? pageSize = default,
            string searchKey = default, ContactType? contactType = ContactType.AllContacts)
        {
            // verify the required parameter 'page' is set
            var localVarPath = "/v1/contacts/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "PageSize",
                        pageSize)); // query parameter
            }

            if (contactType != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "ContactType",
                        contactType)); // query parameter
            }

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "SearchKey",
                        searchKey)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get,
                localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ContactLists", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ContactsList>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContactsList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsList)));
        }

        /// <summary>
        /// Gets the contact list.
        /// </summary>
        /// <param name="page">The page number.</param>
        /// <param name="pageSize">The page size.</param>
        /// <param name="searchKey">The search key.</param>
        /// <param name="contactType">contactType.</param>
        /// <returns>Task of ListContacts.</returns>
        public async Task<ContactsList> ListContactsAsync(int page, int? pageSize = default, string searchKey = default,
            ContactType? contactType = ContactType.AllContacts)
        {
            var localVarResponse = await this.ListContactsAsyncWithHttpInfo(page, pageSize, searchKey, contactType)
                .ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the contact list.
        /// </summary>
        /// <param name="page">The page number.</param>
        /// <param name="pageSize">The page size.</param>
        /// <param name="searchKey">The search key.</param>
        /// <param name="contactType">contactType.</param>
        /// <returns>Task of ApiResponse (ListContacts).</returns>
        public async Task<ApiResponse<ContactsList>> ListContactsAsyncWithHttpInfo(int page, int? pageSize = default,
            string searchKey = default, ContactType? contactType = ContactType.AllContacts)
        {
            // verify the required parameter 'page' is set
            var localVarPath = "/v1/contacts/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "PageSize",
                        pageSize)); // query parameter
            }

            if (contactType != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "ContactType",
                        contactType)); // query parameter
            }

            if (searchKey != null)
            {
                localVarQueryParams.AddRange(
                    this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "SearchKey",
                        searchKey)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get,
                localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ContactLists", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ContactsList>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContactsList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsList)));
        }

        /// <summary>
        ///    Delete the contact when a particular contact’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="id">Contact Id.</param>
        public void DeleteContact(string id)
        {
            this.DeleteContactWithHttpInfo(id);
        }

        /// <summary>
        ///    Delete the contact when a particular contact’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="id">Contact Id.</param>
        /// <returns>ApiResponse of Object(void).</returns>
        public ApiResponse<object> DeleteContactWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdDelete);
            }

            var localVarPath = "/v1/contacts/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Delete,
                localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Gets invite the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="id">The create user details.</param>
        /// <returns>Task of void.</returns>
        public async Task DeleteContactAsync(string id)
        {
            await this.DeleteContactAsyncWithHttpInfo(id).ConfigureAwait(false);
        }

        /// <summary>
        ///     Gets invite the user.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="id">The create user details.</param>
        /// <returns>Task of ApiResponse.</returns>
        public async Task<ApiResponse<object>> DeleteContactAsyncWithHttpInfo(string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdDelete);
            }

            var localVarPath = "/v1/contacts/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType =
                this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(
                this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                    HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams,
                    localVarFileParams, localVarHttpContentType, localVarFileUrlParams)
                .ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public CreatedContact CreateContact(List<ContactDetails> contactsDetailsList = default)
        {
            var createContactResponse = this.CreateContactWithHttpInfo(contactsDetailsList);

            return createContactResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<CreatedContact> CreateContactWithHttpInfo(List<ContactDetails> contactsDetailsList = default)
        {
            if (contactsDetailsList == null)
            {
                throw new ArgumentNullException(nameof(contactsDetailsList));
            }

            ValidateCreateContactProperties(contactsDetailsList);

            var localVarPath = "/v1/contacts/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (contactsDetailsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactsDetailsList);
            }
            else
            {
                localVarPostBody = contactsDetailsList; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreatedContact>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CreatedContact)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContact)));
        }

        /// <inheritdoc/>
        public async Task<CreatedContact> CreateContactAsync(List<ContactDetails> contactDetailsList = default)
        {
            var localVarResponse = await this.CreateContactAsyncWithHttpInfo(contactDetailsList).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<CreatedContact>> CreateContactAsyncWithHttpInfo(List<ContactDetails> contactsDetailsList = default)
        {
            if (contactsDetailsList == null)
            {
                throw new ArgumentNullException(nameof(contactsDetailsList));
            }

            ValidateCreateContactProperties(contactsDetailsList);

            var localVarPath = "/v1/contacts/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (contactsDetailsList.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(contactsDetailsList);
            }
            else
            {
                localVarPostBody = contactsDetailsList; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CreatedContact>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CreatedContact)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CreatedContact)));
        }

        /// <inheritdoc/>
        public void UpdateContact(string id, ContactDetails updateContact)
        {
            this.UpdateContactWithHttpInfo(id, updateContact);
        }

        /// <inheritdoc/>
        public ApiResponse<object> UpdateContactWithHttpInfo(string id, ContactDetails updateContact)
        {
            if (updateContact == null)
            {
                throw new ArgumentNullException(nameof(updateContact));
            }

            if (string.IsNullOrEmpty(id))
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdMissing);
            }

            var localVarPath = "/v1/contacts/update";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter
            if (updateContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContact);
            }
            else
            {
                localVarPostBody = updateContact; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("UpdateContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public async Task UpdateContactAsync(string id, ContactDetails updateContact)
        {
           await this.UpdateContactAsyncWithHttpInfo(id, updateContact).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<object>> UpdateContactAsyncWithHttpInfo(string id, ContactDetails updateContact)
        {
            if (updateContact == null)
            {
                throw new ArgumentNullException(nameof(updateContact));
            }

            if (string.IsNullOrEmpty(id))
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdMissing);
            }

            var localVarPath = "/v1/contacts/update";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter
            if (updateContact.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(updateContact);
            }
            else
            {
                localVarPostBody = updateContact; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Put, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("UpdateContact", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public ContactsDetails GetContact(string id)
        {
            var localVarResponse = this.GetContactWithHttpInfo(id);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<ContactsDetails> GetContactWithHttpInfo(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdMissing);
            }

            var localVarPath = "/v1/contacts/get";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ContactsDetails>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContactsDetails)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ContactsDetails)));
        }

        /// <inheritdoc/>
        public async Task<ContactsDetails> GetContactAsync(string id)
        {
            var localVarResponse = await this.GetContactAsyncWithHttpInfo(id).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<ContactsDetails>> GetContactAsyncWithHttpInfo(string id)
        {
            if (string.IsNullOrEmpty(id))
            {
                throw new ApiException(400, ApiValidationMessages.ContactIdMissing);
            }

            var localVarPath = "/v1/contacts/get";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Id", id)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetProperties", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<ContactsDetails>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (ContactsDetails)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(UserProperties)));
        }

        private static void ValidateCreateContactProperties(List<ContactDetails> contactDetailsList)
        {
            foreach (var contacts in contactDetailsList)
            {
                if (string.IsNullOrEmpty(contacts.Email))
                {
                    throw new ApiException(422, ApiValidationMessages.EmailIdRequired);
                }

                if (!IsValidEmail(contacts.Email))
                {
                    throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
                }
            }
        }

        /// <summary>
        /// Validate Email.
        /// </summary>
        /// <param name="email">Email Id.</param>
        /// <returns>True if the email is valid.</returns>
        /// https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format
        private static bool IsValidEmail(string email)
        {
            if (string.IsNullOrWhiteSpace(email))
            {
                return false;
            }

            try
            {
                // Normalize the domain
                email = Regex.Replace(
                    email,
                    @"(@)(.+)$",
                    DomainMapper,
                    RegexOptions.None,
                    TimeSpan.FromMilliseconds(200));

                // Examines the domain part of the email and normalizes it.
                string DomainMapper(Match match)
                {
                    // Use IdnMapping class to convert Unicode domain names.
                    var idn = new IdnMapping();

                    // Pull out and process domain name (throws ArgumentException on invalid)
                    var domainName = idn.GetAscii(match.Groups[2].Value);

                    return match.Groups[1].Value + domainName;
                }
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
            catch (ArgumentException)
            {
                return false;
            }

            try
            {
                return Regex.IsMatch(
                    email,
#pragma warning disable SA1118 // Parameter should not span multiple lines
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))"
                    + @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
#pragma warning restore SA1118 // Parameter should not span multiple lines
                    RegexOptions.IgnoreCase,
                    TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }
    }
}
