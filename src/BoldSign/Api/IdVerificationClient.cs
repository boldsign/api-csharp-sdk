// <copyright file="IdVerificationClient.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Linq;
    using System.Net.Http;
    using System.Threading.Tasks;
    using BoldSign.Api.Resources;
    using BoldSign.Model;
    using BoldSign.Model.IdVerification;

    /// <summary>
    ///  Represents a collection of functions to interact with the API endpoints. The functions perform actions such as get report, get image and create embedded verification url.
    /// </summary>
    public class IdVerificationClient : IIdVerificationClient
    {
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="IdVerificationClient" /> class.
        /// </summary>
        /// <param name="basePath">Gets or set the basePath.</param>
        public IdVerificationClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="IdVerificationClient" /> class.
        /// </summary>
        public IdVerificationClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="IdVerificationClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        public IdVerificationClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="IdVerificationClient"/> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient.</param>
        public IdVerificationClient(ApiClient apiClient)
        {
            if (apiClient == null)
            {
                throw new ArgumentNullException(nameof(apiClient));
            }

            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Gets or sets provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(ApiValidationMessages.ExceptionFactoryUnsupported);
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        /// Id Verification paths.
        /// </summary>
        /// <value>The base path.</value>
        /// <returns>GetBasePath.</returns>
        public string GetBasePath() => this.Configuration.ApiClient.HttpClient.BaseAddress.AbsoluteUri;

        /// <inheritdoc/>
        public IdReport GetReport(string documentId, VerificationReportRequest verificationReportRequest = default)
        {
            var localVarResponse = this.GetReportWithHttpInfo(documentId, verificationReportRequest);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<IdReport> GetReportWithHttpInfo(string documentId, VerificationReportRequest verificationReportRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdReport);
            }

            var localVarPath = "/v1/identityVerification/report";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (verificationReportRequest != null && verificationReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verificationReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verificationReportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetReport", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<IdReport>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdReport)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdReport)));
        }

        /// <inheritdoc/>
        public async Task<IdReport> GetReportAsync(string documentId, VerificationReportRequest verificationReportRequest = default)
        {
            var localVarResponse = await this.GetReportWithHttpInfoAsync(documentId, verificationReportRequest)
                .ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<IdReport>> GetReportWithHttpInfoAsync(string documentId, VerificationReportRequest verificationReportRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdReport);
            }

            var localVarPath = "/v1/identityVerification/report";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (verificationReportRequest != null && verificationReportRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verificationReportRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verificationReportRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetReport", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<IdReport>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (IdReport)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IdReport)));
        }

        /// <inheritdoc/>
        public Stream GetImage(string documentId, VerificationImageRequest verificationImageRequest = default)
        {
            var localVarResponse = this.GetImageWithHttpInfo(documentId, verificationImageRequest);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<Stream> GetImageWithHttpInfo(string documentId, VerificationImageRequest verificationImageRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdImage);
            }

            // verify the required parameter 'fileId' is set
            if (verificationImageRequest?.FileId == null)
            {
                throw new ApiException(400, ApiValidationMessages.FileIdImage);
            }

            var localVarPath = "/v1/identityVerification/image";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (verificationImageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verificationImageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verificationImageRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetImage", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <inheritdoc/>
        public async Task<Stream> GetImageAsync(string documentId, VerificationImageRequest verificationImageRequest = default)
        {
            var localVarResponse = await this.GetImageWithHttpInfoAsync(documentId, verificationImageRequest)
                .ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<Stream>> GetImageWithHttpInfoAsync(string documentId, VerificationImageRequest verificationImageRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdImage);
            }

            // verify the required parameter 'fileId' is set
            if (verificationImageRequest?.FileId == null)
            {
                throw new ApiException(400, ApiValidationMessages.FileIdImage);
            }

            var localVarPath = "/v1/identityVerification/image";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (verificationImageRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(verificationImageRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = verificationImageRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetImage", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<Stream>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (Stream)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Stream)));
        }

        /// <inheritdoc/>
        public EmbeddedVerificationCreated CreateEmbeddedVerificationUrl(string documentId, EmbeddedVerificationRequest embeddedVerificationRequest = default)
        {
            var localVarResponse = this.CreateEmbeddedVerificationUrlWithHttpInfo(documentId, embeddedVerificationRequest);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<EmbeddedVerificationCreated> CreateEmbeddedVerificationUrlWithHttpInfo(string documentId, EmbeddedVerificationRequest embeddedVerificationRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdVerificationUrl);
            }

            var localVarPath = "/v1/identityVerification/createEmbeddedVerificationUrl";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (embeddedVerificationRequest != null && embeddedVerificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(embeddedVerificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = embeddedVerificationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedVerificationUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedVerificationCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmbeddedVerificationCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedVerificationCreated)));
        }

        /// <inheritdoc/>
        public async Task<EmbeddedVerificationCreated> CreateEmbeddedVerificationUrlAsync(string documentId, EmbeddedVerificationRequest embeddedVerificationRequest = default)
        {
            var localVarResponse = await this.CreateEmbeddedVerificationUrlWithHttpInfoAsync(documentId, embeddedVerificationRequest)
                .ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<EmbeddedVerificationCreated>> CreateEmbeddedVerificationUrlWithHttpInfoAsync(string documentId, EmbeddedVerificationRequest embeddedVerificationRequest = default)
        {
            // verify the required parameter 'documentId' is set
            if (documentId == null)
            {
                throw new ApiException(400, ApiValidationMessages.DocumentIdVerificationUrl);
            }

            var localVarPath = "/v1/identityVerification/createEmbeddedVerificationUrl";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "documentId", documentId));

            if (embeddedVerificationRequest != null && embeddedVerificationRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(embeddedVerificationRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = embeddedVerificationRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(
                localVarPath,
                HttpMethod.Post,
                localVarQueryParams,
                localVarPostBody,
                localVarHeaderParams,
                localVarFormParams,
                localVarFileParams,
                localVarHttpContentType,
                localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedVerificationUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedVerificationCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmbeddedVerificationCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedVerificationCreated)));
        }
    }
}
