// <copyright file="BrandingClient.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Threading.Tasks;
    using BoldSign.Api.Resources;
    using BoldSign.Model;

    /// <summary>
    ///    Represents a collection of functions to interact with the API endpoints. The functions perform actions such as creating brand, deleting brand, listing the brand and so on.
    /// </summary>
    public class BrandingClient : IBrandingClient
    {
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandingClient" /> class.
        /// </summary>
        /// <param name="basePath">Gets or set the basePath.</param>
        public BrandingClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandingClient" /> class.
        /// </summary>
        public BrandingClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandingClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        public BrandingClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="BrandingClient"/> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient.</param>
        public BrandingClient(ApiClient apiClient)
        {
            if (apiClient == null)
            {
                throw new ArgumentNullException(nameof(apiClient));
            }

            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Gets or sets provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        /// branding paths.
        /// </summary>
        /// <value>The base path.</value>
        /// <returns>GetBasePath.</returns>
        public string GetBasePath() => this.Configuration.ApiClient.HttpClient.BaseAddress.AbsoluteUri;

        /// <summary>
        ///     Delete the branding when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        public void DeleteBrand(string brandId)
        {
            this.DeleteBrandWithHttpInfo(brandId);
        }

        /// <summary>
        ///    Delete the brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>ApiResponse of Object(void).</returns>
        public ApiResponse<object> DeleteBrandWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdDelete);
            }

            var localVarPath = "/v1/brand/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Delete the brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of void.</returns>
        public async Task DeleteBrandAsync(string brandId)
        {
            await this.DeleteBrandAsyncWithHttpInfo(brandId).ConfigureAwait(false);
        }

        /// <summary>
        ///     Delete the brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of ApiResponse.</returns>
        public async Task<ApiResponse<object>> DeleteBrandAsyncWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdDelete);
            }

            var localVarPath = "/v1/brand/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Reset the default brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        public void ResetDefaultBrand(string brandId)
        {
            this.ResetDefaultBrandWithHttpInfo(brandId);
        }

        /// <summary>
        ///    Reset the default brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>ApiResponse of Object(void).</returns>
        public ApiResponse<object> ResetDefaultBrandWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdResetDefault);
            }

            var localVarPath = "/v1/brand/resetdefault";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ResetDefaultBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     Reset the default brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of void.</returns>
        public async Task ResetDefaultBrandAsync(string brandId)
        {
            await this.ResetDefaultBrandWithHttpInfoAsync(brandId).ConfigureAwait(false);
        }

        /// <summary>
        ///     Reset the default brand when a particular brand’s ID is given as input.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of ApiResponse.</returns>
        public async Task<ApiResponse<object>> ResetDefaultBrandWithHttpInfoAsync(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdResetDefault);
            }

            var localVarPath = "/v1/brand/resetdefault";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ResetDefaultBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        ///     create the brand.
        /// </summary>
        /// <param name="createBrandData">createBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>BrandingData.</returns>
        public BrandingData CreateBrand(BrandSettings createBrandData)
        {
            var localVarResponse = this.CreateBrandWithHttpInfo(createBrandData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     create the brand.
        /// </summary>
        /// <param name="createBrandData">createBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>ApiResponse of object(BrandingData).</returns>
        public ApiResponse<BrandingData> CreateBrandWithHttpInfo(BrandSettings createBrandData)
        {
            if (createBrandData == null)
            {
                throw new ArgumentNullException(nameof(createBrandData));
            }

            ValidateBrandSettings(createBrandData);

            var localVarPath = "/v1/brand/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            KeyValuePair<string, IImageFile> localVarSingleFileParams;
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarFormParams.Add(nameof(createBrandData.BrandName), createBrandData.BrandName);
            localVarSingleFileParams = new KeyValuePair<string, IImageFile>(nameof(createBrandData.BrandLogo), createBrandData.BrandLogo);
            localVarFormParams.Add(nameof(createBrandData.BackgroundColor), createBrandData.BackgroundColor);
            localVarFormParams.Add(nameof(createBrandData.ButtonColor), createBrandData.ButtonColor);
            localVarFormParams.Add(nameof(createBrandData.ButtonTextColor), createBrandData.ButtonTextColor);
            localVarFormParams.Add(nameof(createBrandData.CanHideTagLine), createBrandData.CanHideTagLine ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.CombineAuditTrail), createBrandData.CombineAuditTrail ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ExcludeAuditTrailFromEmail), createBrandData.ExcludeAuditTrailFromEmail ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.IsDefault), createBrandData.IsDefault ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.RedirectUrl), createBrandData.RedirectUrl);
            localVarFormParams.Add(nameof(createBrandData.EmailDisplayName), createBrandData.EmailDisplayName);
            localVarFormParams.Add(nameof(createBrandData.DisclaimerDescription), createBrandData.DisclaimerDescription);
            localVarFormParams.Add(nameof(createBrandData.DisclaimerTitle), createBrandData.DisclaimerTitle);
            localVarFormParams.Add(nameof(createBrandData.DocumentTimeZone), createBrandData.DocumentTimeZone);
            localVarFormParams.Add(nameof(createBrandData.AllowCustomFieldCreation), createBrandData.AllowCustomFieldCreation ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ShowBuiltInFormFields), createBrandData.ShowBuiltInFormFields ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ShowSharedCustomFields), createBrandData.ShowSharedCustomFields ? "true" : "false");

            if (createBrandData.HideDecline != null)
            {
                localVarFormParams.Add(nameof(createBrandData.HideDecline), createBrandData.HideDecline.Value ? "true" : "false");
            }

            if (createBrandData.HideSave != null)
            {
                localVarFormParams.Add(nameof(createBrandData.HideSave), createBrandData.HideSave.Value ? "true" : "false");
            }

            if (createBrandData.EmailSignedDocument != 0)
            {
                localVarFormParams.Add(nameof(createBrandData.EmailSignedDocument), createBrandData.EmailSignedDocument.ToString());
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams, localVarSingleFileParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingData>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingData)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingData)));
        }

        /// <summary>
        ///     create the brand.
        /// </summary>
        /// <param name="createBrandData">createBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of BrandingData.</returns>
        public async Task<BrandingData> CreateBrandAsync(BrandSettings createBrandData)
        {
            var localVariableResponse = await this.CreateBrandAsyncWithHttpInfo(createBrandData).ConfigureAwait(false);
            return localVariableResponse.Data;
        }

        /// <summary>
        ///     create the brand.
        /// </summary>
        /// <param name="createBrandData">createBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of ApiResponse(BrandingData).</returns>
        public async Task<ApiResponse<BrandingData>> CreateBrandAsyncWithHttpInfo(BrandSettings createBrandData)
        {
            if (createBrandData == null)
            {
                throw new ArgumentNullException(nameof(createBrandData));
            }

            ValidateBrandSettings(createBrandData);

            var localVarPath = "/v1/brand/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            KeyValuePair<string, IImageFile> localVarSingleFileParams;
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarFormParams.Add(nameof(createBrandData.BrandName), createBrandData.BrandName);
            localVarSingleFileParams = new KeyValuePair<string, IImageFile>(nameof(createBrandData.BrandLogo), createBrandData.BrandLogo);
            localVarFormParams.Add(nameof(createBrandData.BackgroundColor), createBrandData.BackgroundColor);
            localVarFormParams.Add(nameof(createBrandData.ButtonColor), createBrandData.ButtonColor);
            localVarFormParams.Add(nameof(createBrandData.ButtonTextColor), createBrandData.ButtonTextColor);
            localVarFormParams.Add(nameof(createBrandData.CanHideTagLine), createBrandData.CanHideTagLine ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.CombineAuditTrail), createBrandData.CombineAuditTrail ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ExcludeAuditTrailFromEmail), createBrandData.ExcludeAuditTrailFromEmail ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.IsDefault), createBrandData.IsDefault ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.RedirectUrl), createBrandData.RedirectUrl);
            localVarFormParams.Add(nameof(createBrandData.EmailDisplayName), createBrandData.EmailDisplayName);
            localVarFormParams.Add(nameof(createBrandData.DisclaimerDescription), createBrandData.DisclaimerDescription);
            localVarFormParams.Add(nameof(createBrandData.DisclaimerTitle), createBrandData.DisclaimerTitle);
            localVarFormParams.Add(nameof(createBrandData.DocumentTimeZone), createBrandData.DocumentTimeZone);
            localVarFormParams.Add(nameof(createBrandData.AllowCustomFieldCreation), createBrandData.AllowCustomFieldCreation ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ShowBuiltInFormFields), createBrandData.ShowBuiltInFormFields ? "true" : "false");
            localVarFormParams.Add(nameof(createBrandData.ShowSharedCustomFields), createBrandData.ShowSharedCustomFields ? "true" : "false");

            if (createBrandData.HideDecline != null)
            {
                localVarFormParams.Add(nameof(createBrandData.HideDecline), createBrandData.HideDecline.Value ? "true" : "false");
            }

            if (createBrandData.HideSave != null)
            {
                localVarFormParams.Add(nameof(createBrandData.HideSave), createBrandData.HideSave.Value ? "true" : "false");
            }

            if (createBrandData.EmailSignedDocument != 0)
            {
                localVarFormParams.Add(nameof(createBrandData.EmailSignedDocument), createBrandData.EmailSignedDocument.ToString());
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams, localVarSingleFileParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("CreateBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingData>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingData)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingData)));
        }

        /// <summary>
        ///     edit the brand.
        /// </summary>
        /// <param name="brandId">brandId.</param>
        /// <param name="editBrandData">editBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>BrandingData.</returns>
        public BrandingData EditBrand(string brandId, BrandSettings editBrandData)
        {
            var localVarResponse = this.EditBrandWithHttpInfo(brandId, editBrandData);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     edit the brand.
        /// </summary>
        /// <param name="brandId">brandId.</param>
        /// <param name="editBrandData">editBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>ApiResponse of Object(BrandingData).</returns>
        public ApiResponse<BrandingData> EditBrandWithHttpInfo(string brandId, BrandSettings editBrandData)
        {
            if (editBrandData == null)
            {
                throw new ArgumentNullException(nameof(editBrandData));
            }

            ValidateEditBrandSettings(editBrandData);

            var localVarPath = "/v1/brand/edit";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            KeyValuePair<string, IImageFile> localVarSingleFileParams = default;
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter
            localVarFormParams.Add(nameof(editBrandData.BrandName), editBrandData.BrandName);
            if (editBrandData.BrandLogo != null)
            {
                localVarSingleFileParams = new KeyValuePair<string, IImageFile>(nameof(editBrandData.BrandLogo), editBrandData.BrandLogo);
            }
            localVarFormParams.Add(nameof(editBrandData.BackgroundColor), editBrandData.BackgroundColor);
            localVarFormParams.Add(nameof(editBrandData.ButtonColor), editBrandData.ButtonColor);
            localVarFormParams.Add(nameof(editBrandData.ButtonTextColor), editBrandData.ButtonTextColor);
            localVarFormParams.Add(nameof(editBrandData.CanHideTagLine), editBrandData.CanHideTagLine ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.CombineAuditTrail), editBrandData.CombineAuditTrail ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ExcludeAuditTrailFromEmail), editBrandData.ExcludeAuditTrailFromEmail ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.IsDefault), editBrandData.IsDefault ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.RedirectUrl), editBrandData.RedirectUrl);
            localVarFormParams.Add(nameof(editBrandData.EmailDisplayName), editBrandData.EmailDisplayName);
            localVarFormParams.Add(nameof(editBrandData.DisclaimerDescription), editBrandData.DisclaimerDescription);
            localVarFormParams.Add(nameof(editBrandData.DisclaimerTitle), editBrandData.DisclaimerTitle);
            localVarFormParams.Add(nameof(editBrandData.DocumentTimeZone), editBrandData.DocumentTimeZone);
            localVarFormParams.Add(nameof(editBrandData.AllowCustomFieldCreation), editBrandData.AllowCustomFieldCreation ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ShowBuiltInFormFields), editBrandData.ShowBuiltInFormFields ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ShowSharedCustomFields), editBrandData.ShowSharedCustomFields ? "true" : "false");

            if (editBrandData.HideDecline != null)
            {
                localVarFormParams.Add(nameof(editBrandData.HideDecline), editBrandData.HideDecline.Value ? "true" : "false");
            }

            if (editBrandData.HideSave != null)
            {
                localVarFormParams.Add(nameof(editBrandData.HideSave), editBrandData.HideSave.Value ? "true" : "false");
            }

            if (editBrandData.EmailSignedDocument != 0)
            {
                localVarFormParams.Add(nameof(editBrandData.EmailSignedDocument), editBrandData.EmailSignedDocument.ToString());
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams, localVarSingleFileParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("EditBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingData>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingData)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingData)));
        }

        /// <summary>
        ///     edit the brand.
        /// </summary>
        /// <param name="brandId">brandId.</param>
        /// <param name="editBrandData">editBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of BrandingData.</returns>
        public async Task<BrandingData> EditBrandAsync(string brandId, BrandSettings editBrandData)
        {
            var localVarResponse = await this.EditBrandAsyncWithHttpInfo(brandId, editBrandData).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        ///     edit the brand.
        /// </summary>
        /// <param name="brandId">brandId.</param>
        /// <param name="editBrandData">editBrandData.</param>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of ApiResponse (BrandingData).</returns>
        public async Task<ApiResponse<BrandingData>> EditBrandAsyncWithHttpInfo(string brandId, BrandSettings editBrandData)
        {
            if (editBrandData == null)
            {
                throw new ArgumentNullException(nameof(editBrandData));
            }

            ValidateEditBrandSettings(editBrandData);

            var localVarPath = "/v1/brand/edit";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            KeyValuePair<string, IImageFile> localVarSingleFileParams = default;
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter
            localVarFormParams.Add(nameof(editBrandData.BrandName), editBrandData.BrandName);
            if (editBrandData.BrandLogo != null)
            {
                localVarSingleFileParams = new KeyValuePair<string, IImageFile>(nameof(editBrandData.BrandLogo), editBrandData.BrandLogo);
            }
            localVarFormParams.Add(nameof(editBrandData.BackgroundColor), editBrandData.BackgroundColor);
            localVarFormParams.Add(nameof(editBrandData.ButtonColor), editBrandData.ButtonColor);
            localVarFormParams.Add(nameof(editBrandData.ButtonTextColor), editBrandData.ButtonTextColor);
            localVarFormParams.Add(nameof(editBrandData.CanHideTagLine), editBrandData.CanHideTagLine ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.CombineAuditTrail), editBrandData.CombineAuditTrail ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ExcludeAuditTrailFromEmail), editBrandData.ExcludeAuditTrailFromEmail ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.IsDefault), editBrandData.IsDefault ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.RedirectUrl), editBrandData.RedirectUrl);
            localVarFormParams.Add(nameof(editBrandData.EmailDisplayName), editBrandData.EmailDisplayName);
            localVarFormParams.Add(nameof(editBrandData.DisclaimerDescription), editBrandData.DisclaimerDescription);
            localVarFormParams.Add(nameof(editBrandData.DisclaimerTitle), editBrandData.DisclaimerTitle);
            localVarFormParams.Add(nameof(editBrandData.DocumentTimeZone), editBrandData.DocumentTimeZone);
            localVarFormParams.Add(nameof(editBrandData.AllowCustomFieldCreation), editBrandData.AllowCustomFieldCreation ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ShowBuiltInFormFields), editBrandData.ShowBuiltInFormFields ? "true" : "false");
            localVarFormParams.Add(nameof(editBrandData.ShowSharedCustomFields), editBrandData.ShowSharedCustomFields ? "true" : "false");

            if (editBrandData.HideDecline != null)
            {
                localVarFormParams.Add(nameof(editBrandData.HideDecline), editBrandData.HideDecline.Value ? "true" : "false");
            }

            if (editBrandData.HideSave != null)
            {
                localVarFormParams.Add(nameof(editBrandData.HideSave), editBrandData.HideSave.Value ? "true" : "false");
            }

            if (editBrandData.EmailSignedDocument != 0)
            {
                localVarFormParams.Add(nameof(editBrandData.EmailSignedDocument), editBrandData.EmailSignedDocument.ToString());
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams, localVarSingleFileParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("EditBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingData>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingData)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingData)));
        }

        /// <summary>
        ///     list the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>BrandingRecords.</returns>
        public BrandingRecords ListBrand()
        {
            var localVarResponse = this.ListBrandWithHttpInfo();

            return localVarResponse.Data;
        }

        /// <summary>
        ///     list the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>ApiResponse of BrandRecords.</returns>
        public ApiResponse<BrandingRecords> ListBrandWithHttpInfo()
        {
            var localVarPath = "/v1/brand/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingRecords)));
        }

        /// <summary>
        ///     list the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of BrandingRecords.</returns>
        public async Task<BrandingRecords> ListBrandAsync()
        {
            var localVarResponse = await this.ListBrandAsyncWithHttpInfo().ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        ///     list the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <returns>Task of ApiResponse (BrandingRecords).</returns>
        public async Task<ApiResponse<BrandingRecords>> ListBrandAsyncWithHttpInfo()
        {
            var localVarPath = "/v1/brand/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[]
            {
                "multipart/form-data",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("ListBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandingRecords>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandingRecords)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandingRecords)));
        }

        /// <summary>
        /// Get the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>BrandDetails.</returns>
        public BrandDetails GetBrandDetails(string brandId)
        {
            var localVarResponse = this.GetBrandDetailsWithHttpInfo(brandId);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>ApiResponse of BrandDetails.</returns>
        public ApiResponse<BrandDetails> GetBrandDetailsWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdGet);
            }

            var localVarPath = "/v1/brand/get";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            string apiKey = this.Configuration.GetApiKeyWithPrefix("Authorization");
            if (!string.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["Authorization"] = apiKey;
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandDetails>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandDetails)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandDetails)));
        }

        /// <summary>
        /// Get the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of BrandDetails.</returns>
        public async Task<BrandDetails> GetBrandDetailsAsync(string brandId)
        {
            var localVarResponse = await this.GetBrandDetailsAsyncWithHttpInfo(brandId).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Get the brand.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <param name="brandId">Brand Id.</param>
        /// <returns>Task of ApiResponse (BrandDetails).</returns>
        public async Task<ApiResponse<BrandDetails>> GetBrandDetailsAsyncWithHttpInfo(string brandId)
        {
            // verify the required parameter 'brandId' is set
            if (brandId == null)
            {
                throw new ApiException(400, ApiValidationMessages.BrandIdGet);
            }

            var localVarPath = "/v1/brand/get";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // authentication (Bearer) required
            string apiKey = this.Configuration.GetApiKeyWithPrefix("Authorization");
            if (!string.IsNullOrEmpty(apiKey))
            {
                localVarHeaderParams["Authorization"] = apiKey;
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("GetBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<BrandDetails>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (BrandDetails)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(BrandDetails)));
        }

        private static void ValidateBrandSettings(BrandSettings brandSettings)
        {
            if (string.IsNullOrEmpty(brandSettings.BrandName))
            {
                throw new ApiException(422, ApiValidationMessages.BrandNameRequired);
            }

            if (brandSettings.BrandLogo == null)
            {
                throw new ApiException(422, ApiValidationMessages.BrandLogoRequired);
            }

            if (!brandSettings.ShowBuiltInFormFields && brandSettings.AllowCustomFieldCreation)
            {
                throw new ApiException(422, ApiValidationMessages.StandardFieldVisibilityErr);
            }
        }

        private static void ValidateEditBrandSettings(BrandSettings brandSettings)
        {
            if (!brandSettings.ShowBuiltInFormFields && brandSettings.AllowCustomFieldCreation)
            {
                throw new ApiException(422, ApiValidationMessages.StandardFieldVisibilityErr);
            }
        }
    }
}
