// <copyright file="CustomFieldClient.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Net.Http;
    using System.Threading.Tasks;
    using BoldSign.Api.Resources;
    using BoldSign.Model;

    /// <summary>
    ///    Represents a collection of functions to interact with the API endpoints. The functions perform actions such as creating custom field, deleting custom field, editing custom field and so on.
    /// </summary>
    public class CustomFieldClient : ICustomFieldClient
    {
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        ///     Initializes a new instance of the <see cref="CustomFieldClient" /> class.
        /// </summary>
        /// <param name="basePath">Gets or set the basePath.</param>
        public CustomFieldClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CustomFieldClient" /> class.
        /// </summary>
        public CustomFieldClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CustomFieldClient" /> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        public CustomFieldClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="CustomFieldClient"/> class
        ///     using Configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of ApiClient.</param>
        public CustomFieldClient(ApiClient apiClient)
        {
            if (apiClient == null)
            {
                throw new ArgumentNullException(nameof(apiClient));
            }

            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        ///     Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Gets or sets provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        /// Custom field paths.
        /// </summary>
        /// <value>The base path.</value>
        /// <returns>GetBasePath.</returns>
        public string GetBasePath() => this.Configuration.ApiClient.HttpClient.BaseAddress.AbsoluteUri;

        /// <summary>
        /// Creates a custom field for the specified brand.
        /// </summary>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        public CustomFieldMessage CreateCustomField(BrandCustomFieldDetails brandCustomFieldDetails)
        {
            var localVarResponse = this.CreateCustomFieldWithHttpInfo(brandCustomFieldDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Created a custom field for the specified brand.
        /// </summary>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public ApiResponse<CustomFieldMessage> CreateCustomFieldWithHttpInfo(BrandCustomFieldDetails brandCustomFieldDetails)
        {
            // verify the required parameter 'brandId' is set
            if (brandCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(brandCustomFieldDetails));
            }

            var localVarPath = "/v1/customField/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (brandCustomFieldDetails != null && brandCustomFieldDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brandCustomFieldDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandCustomFieldDetails; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("SaveCustomFieldDetails", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Creates a custom field for the specified brand.
        /// </summary>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        public async Task<CustomFieldMessage> CreateCustomFieldAsync(BrandCustomFieldDetails brandCustomFieldDetails)
        {
            var localVarResponse = await this.CreateCustomFieldAsyncWithHttpInfo(brandCustomFieldDetails).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Creates a custom field for the specified brand.
        /// </summary>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public async Task<ApiResponse<CustomFieldMessage>> CreateCustomFieldAsyncWithHttpInfo(BrandCustomFieldDetails brandCustomFieldDetails)
        {
            if (brandCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(brandCustomFieldDetails));
            }

            var localVarPath = "/v1/customField/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (brandCustomFieldDetails != null && brandCustomFieldDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brandCustomFieldDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandCustomFieldDetails; // byte array
            }

            // make the HTTP request
            var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("SaveCustomFieldDetails", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Edits a custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field identifier.</param>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        public CustomFieldMessage EditCustomField( string customFieldId, BrandCustomFieldDetails brandCustomFieldDetails)
        {
            var localVarResponse = this.EditCustomFieldWithHttpInfo(customFieldId, brandCustomFieldDetails);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field identifier.</param>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public ApiResponse<CustomFieldMessage> EditCustomFieldWithHttpInfo(string customFieldId, BrandCustomFieldDetails brandCustomFieldDetails)
        {
            if (brandCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(brandCustomFieldDetails));
            }

            var localVarPath = "/v1/customField/edit";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "customFieldId", customFieldId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (brandCustomFieldDetails != null && brandCustomFieldDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brandCustomFieldDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandCustomFieldDetails; // byte array
            }

            // make the HTTP request
            var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("EditCustomFieldDetails", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Edits a custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field identifier.</param>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom message.</returns>
        public async Task<CustomFieldMessage> EditCustomFieldAsync(string customFieldId, BrandCustomFieldDetails brandCustomFieldDetails)
        {
            var localVarResponse = await this.EditCustomFieldAsyncWithHttpInfo(customFieldId, brandCustomFieldDetails).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Edits a custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field identifier.</param>
        /// <param name="brandCustomFieldDetails">The brand custom fields class.</param>
        /// <returns>Return the custom field message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public async Task<ApiResponse<CustomFieldMessage>> EditCustomFieldAsyncWithHttpInfo(string customFieldId, BrandCustomFieldDetails brandCustomFieldDetails)
        {
            if (brandCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(brandCustomFieldDetails));
            }

            var localVarPath = "/v1/customField/edit";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "customFieldId", customFieldId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            if (brandCustomFieldDetails != null && brandCustomFieldDetails.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(brandCustomFieldDetails); // http body (model) parameter
            }
            else
            {
                localVarPostBody = brandCustomFieldDetails; // byte array
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("EditCustomFieldDetails", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Deletes the custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field id.</param>
        /// <returns>Return the custom field message.</returns>
        public CustomFieldMessage DeleteCustomField(string customFieldId)
        {
            var localVarResponse = this.DeleteCustomFieldWithHttpInfo(customFieldId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field id.</param>
        /// <returns>Return the custom field message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public ApiResponse<CustomFieldMessage> DeleteCustomFieldWithHttpInfo(string customFieldId)
        {
            var localVarPath = "/v1/customField/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "customFieldId", customFieldId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Delete,  localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteAndReorderCustomFields", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Deletes the custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field id.</param>
        /// <returns>Return the custom field message.</returns>
        public async Task<CustomFieldMessage> DeleteCustomFieldAsync(string customFieldId)
        {
            var localVarResponse = await this.DeleteCustomFieldAsyncWithHttpInfo(customFieldId).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes the custom field for the specified brand.
        /// </summary>
        /// <param name="customFieldId">The custom field id.</param>
        /// <returns>Return the custom field message.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public async Task<ApiResponse<CustomFieldMessage>> DeleteCustomFieldAsyncWithHttpInfo( string customFieldId)
        {
            var localVarPath = "/v1/customField/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/plain",
                "text/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "customFieldId", customFieldId)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteAndReorderCustomFields", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldMessage>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldMessage)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldMessage)));
        }

        /// <summary>
        /// Gets the collections of custom fields for the specified brand.
        /// </summary>
        /// <param name="brandId">The brand Id.</param>
        /// <returns>Returns the collection of custom fields.</returns>
        public CustomFieldCollection GetBrandBasedCustomFields(string brandId)
        {
            var localVarResponse = this.GetBrandBasedCustomFieldsWithHttpInfo(brandId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the collections of custom fields for the specified brand.
        /// </summary>
        /// <param name="brandId">The brand Id.</param>
        /// <returns>Returns the collection of custom fields.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public ApiResponse<CustomFieldCollection> GetBrandBasedCustomFieldsWithHttpInfo(string brandId)
        {
            if (brandId == null)
            {
                throw new ArgumentNullException(nameof(brandId));
            }

            var localVarPath = "/v1/customField/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("GetBrandBasedCustomFields", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldCollection>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldCollection)));
        }

        /// <summary>
        /// Gets the collections of custom fields for the specified brand.
        /// </summary>
        /// <param name="brandId">The brand Id.</param>
        /// <returns>Returns the collection of custom fields.</returns>
        public async Task<CustomFieldCollection> GetBrandBasedCustomFieldsAsync(string brandId)
        {
            var localVarResponse = await this.GetBrandBasedCustomFieldsAsyncWithHttpInfo(brandId).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Gets the collections of custom fields for the specified brand.
        /// </summary>
        /// <param name="brandId">The brand Id.</param>
        /// <returns>Returns the collection of custom fields.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public async Task<ApiResponse<CustomFieldCollection>> GetBrandBasedCustomFieldsAsyncWithHttpInfo(string brandId)
        {
            if (brandId == null)
            {
                throw new ArgumentNullException(nameof(brandId));
            }

            var localVarPath = "/v1/customField/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", brandId)); // query parameter

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;
            var exception = this.ExceptionFactory?.Invoke("ListBrand", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<CustomFieldCollection>(localVarStatusCode, localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)), (CustomFieldCollection)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(CustomFieldCollection)));
        }

        /// <summary>
        /// Generates a URL to embed manipulation of custom field process into your application.
        /// </summary>
        /// <param name="embeddedCustomFieldDetails">The embedded custom field details.</param>
        /// <returns>Returns the embedded custom field url.</returns>
        public EmbeddedCustomFieldCreated CreateEmbeddedCustomFieldUrl(EmbeddedCustomFieldDetails embeddedCustomFieldDetails)
        {
            var localVarResponse = this.CreateEmbeddedCustomFieldUrlWithHttpInfo(embeddedCustomFieldDetails);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a URL to embed manipulation of custom field process into your application.
        /// </summary>
        /// <param name="embeddedCustomFieldDetails">The embedded custom field details.</param>
        /// <returns>Returns the embedded custom field url.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public ApiResponse<EmbeddedCustomFieldCreated> CreateEmbeddedCustomFieldUrlWithHttpInfo(EmbeddedCustomFieldDetails embeddedCustomFieldDetails)
        {
            if (embeddedCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(embeddedCustomFieldDetails));
            }

            if (string.IsNullOrEmpty(embeddedCustomFieldDetails.BrandId))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidBrandId);
            }

            const string localVarPath = "/v1/customField/createEmbeddedCustomFieldUrl";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", embeddedCustomFieldDetails.BrandId)); // query parameter

            if (embeddedCustomFieldDetails.LinkValidTill != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "linkValidTill", embeddedCustomFieldDetails.LinkValidTill)); // query parameter
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, null, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedCustomFieldUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedCustomFieldCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmbeddedCustomFieldCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedCustomFieldCreated)));
        }

        /// <summary>
        /// Generates a URL to embed manipulation of custom field process into your application.
        /// </summary>
        /// <param name="embeddedCustomFieldDetails">The embedded custom field details.</param>
        /// <returns>Returns the embedded custom field url.</returns>
        public async Task<EmbeddedCustomFieldCreated> CreateEmbeddedCustomFieldUrlAsync(EmbeddedCustomFieldDetails embeddedCustomFieldDetails)
        {
            var localVarResponse = await this.CreateEmbeddedCustomFieldUrlAsyncWithHttpInfo(embeddedCustomFieldDetails).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <summary>
        /// Generates a URL to embed manipulation of custom field process into your application.
        /// </summary>
        /// <param name="embeddedCustomFieldDetails">The embedded custom field details.</param>
        /// <returns>Returns the embedded custom field url.</returns>
        /// <exception cref="ApiException">Thrown when fails to make API call.</exception>
        /// <exception cref="Exception">Thrown when fails to make call.</exception>
        public async Task<ApiResponse<EmbeddedCustomFieldCreated>> CreateEmbeddedCustomFieldUrlAsyncWithHttpInfo(EmbeddedCustomFieldDetails embeddedCustomFieldDetails)
        {
            if (embeddedCustomFieldDetails == null)
            {
                throw new ArgumentNullException(nameof(embeddedCustomFieldDetails));
            }

            if (string.IsNullOrEmpty(embeddedCustomFieldDetails.BrandId))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidBrandId);
            }

            const string localVarPath = "/v1/customField/createEmbeddedCustomFieldUrl";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "brandId", embeddedCustomFieldDetails.BrandId)); // query parameter

            if (embeddedCustomFieldDetails.LinkValidTill != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "linkValidTill", embeddedCustomFieldDetails.LinkValidTill)); // query parameter
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, null, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateEmbeddedCustomFieldUrl", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<EmbeddedCustomFieldCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (EmbeddedCustomFieldCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(EmbeddedCustomFieldCreated)));
        }
    }
}
