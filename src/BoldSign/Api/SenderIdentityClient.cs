// <copyright file="SenderIdentityClient.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Api
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Globalization;
    using System.IO;
    using System.Linq;
    using System.Net.Http;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using BoldSign.Api.Resources;
    using BoldSign.Model;
    using Newtonsoft.Json;

    /// <summary>
    ///  Represents a function to interact with the API endpoints. The function perform action such as creating sender identity and so on.
    /// </summary>
    public class SenderIdentityClient : ISenderIdentityClient
    {
        private ExceptionFactory exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIdentityClient" /> class.
        /// </summary>
        /// <param name="basePath">A base path.</param>
        public SenderIdentityClient(string basePath)
        {
            this.Configuration = new Configuration { BasePath = basePath };

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIdentityClient" /> class.
        /// </summary>
        public SenderIdentityClient()
        {
            this.Configuration = Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIdentityClient" /> class
        /// Using configuration object.
        /// </summary>
        /// <param name="configuration">An instance of configuration.</param>
        public SenderIdentityClient(Configuration configuration = null)
        {
            this.Configuration = configuration ?? Configuration.Default;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SenderIdentityClient"/> class
        /// Using configuration object.
        /// </summary>
        /// <param name="apiClient">An instance of api client.</param>
        public SenderIdentityClient(ApiClient apiClient)
        {
            if (apiClient == null)
            {
                throw new ArgumentNullException(nameof(apiClient));
            }

            this.Configuration = (Configuration)apiClient.Configuration;
            this.Configuration.ApiClient = apiClient;

            this.ExceptionFactory = Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets or sets the configuration object.
        /// </summary>
        /// <value>An instance of the Configuration.</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        ///     Gets or sets provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (this.exceptionFactory != null && this.exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }

                return this.exceptionFactory;
            }
            set => this.exceptionFactory = value;
        }

        /// <summary>
        /// Gets the base path of the api client.
        /// </summary>
        /// <value>The base path.</value>
        /// <returns>base path.</returns>
        public string GetBasePath() => this.Configuration.ApiClient.HttpClient.BaseAddress.AbsoluteUri;

        /// <inheritdoc/>
        public SenderIdentityCreated CreateSenderIdentity(SenderIdentityRequest createSenderIdentityRequest = default)
        {
            var senderIdentityCreated = this.CreateSenderIdentityWithHttpInfo(createSenderIdentityRequest);

            return senderIdentityCreated.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<SenderIdentityCreated> CreateSenderIdentityWithHttpInfo(SenderIdentityRequest createSenderIdentityRequest = default)
        {
            if (createSenderIdentityRequest == null)
            {
                throw new ArgumentNullException(nameof(createSenderIdentityRequest));
            }

            ValidateCreateSenderIdentityProperties(createSenderIdentityRequest);

            var localVarPath = "/v1/senderIdentities/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSenderIdentityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSenderIdentityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSenderIdentityRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<SenderIdentityCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SenderIdentityCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderIdentityCreated)));
        }

        /// <inheritdoc/>
        public async Task<SenderIdentityCreated> CreateSenderIdentityAsync(SenderIdentityRequest createSenderIdentityRequest = default)
        {
            var senderIdentityCreated = await this.CreateSenderIdentityAsyncWithHttpInfo(createSenderIdentityRequest).ConfigureAwait(false);

            return senderIdentityCreated.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<SenderIdentityCreated>> CreateSenderIdentityAsyncWithHttpInfo(SenderIdentityRequest createSenderIdentityRequest = default)
        {
            if (createSenderIdentityRequest == null)
            {
                throw new ArgumentNullException(nameof(createSenderIdentityRequest));
            }

            ValidateCreateSenderIdentityProperties(createSenderIdentityRequest);

            var localVarPath = "/v1/senderIdentities/create";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            string[] localVarHttpContentTypes =
            {
                "application/json;odata.metadata=minimal;odata.streaming=true",
                "application/json;odata.metadata=minimal;odata.streaming=false",
                "application/json;odata.metadata=minimal",
                "application/json;odata.metadata=full;odata.streaming=true",
                "application/json;odata.metadata=full;odata.streaming=false",
                "application/json;odata.metadata=full",
                "application/json;odata.metadata=none;odata.streaming=true",
                "application/json;odata.metadata=none;odata.streaming=false",
                "application/json;odata.metadata=none",
                "application/json;odata.streaming=true",
                "application/json;odata.streaming=false",
                "application/json",
                "application/xml",
                "application/prs.odatatestxx-odata",
                "text/json",
                "application/_*+json",
            };
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts =
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (createSenderIdentityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(createSenderIdentityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createSenderIdentityRequest; // byte array
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("CreateSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<SenderIdentityCreated>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SenderIdentityCreated)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderIdentityCreated)));
        }

        /// <inheritdoc/>
        public void UpdateSenderIdentity(SenderIdentityRequest editSenderIdentityRequest)
        {
            this.UpdateSenderIdentityWithHttpInfo(editSenderIdentityRequest);
        }

        /// <inheritdoc/>
        public ApiResponse<object> UpdateSenderIdentityWithHttpInfo(SenderIdentityRequest editSenderIdentityRequest)
        {
            if (editSenderIdentityRequest == null)
            {
                throw new ArgumentNullException(nameof(editSenderIdentityRequest));
            }

            ValidateEditSenderIdentityProperties(editSenderIdentityRequest);

            var localVarPath = "/v1/senderIdentities/update";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (editSenderIdentityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(editSenderIdentityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = editSenderIdentityRequest; // byte array
            }

            if (!string.IsNullOrEmpty(editSenderIdentityRequest.Email))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", editSenderIdentityRequest.Email)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("UpdateSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public async Task UpdateSenderIdentityAsync(SenderIdentityRequest editSenderIdentityRequest)
        {
            await this.UpdateSenderIdentityAsyncWithHttpInfo(editSenderIdentityRequest).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<object>> UpdateSenderIdentityAsyncWithHttpInfo(SenderIdentityRequest editSenderIdentityRequest)
        {
            if (editSenderIdentityRequest == null)
            {
                throw new ArgumentNullException(nameof(editSenderIdentityRequest));
            }

            ValidateEditSenderIdentityProperties(editSenderIdentityRequest);

            var localVarPath = "/v1/senderIdentities/update";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            if (editSenderIdentityRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(editSenderIdentityRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = editSenderIdentityRequest; // byte array
            }

            if (!string.IsNullOrEmpty(editSenderIdentityRequest.Email))
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", editSenderIdentityRequest.Email)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("UpdateSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public void ResendInvitation(string email)
        {
            this.ResendInvitationWithHttpInfo(email);
        }

        /// <inheritdoc/>
        public ApiResponse<object> ResendInvitationWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/resendInvitation";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ResendInvitation", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public async Task ResendInvitationAsync(string email)
        {
            await this.ResendInvitationAsyncWithHttpInfo(email).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<object>> ResendInvitationAsyncWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/resendInvitation";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ResendInvitation", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public void RerequestSenderIdentity(string email)
        {
            this.RerequestSenderIdentityWithHttpInfo(email);
        }

        /// <inheritdoc/>
        public ApiResponse<object> RerequestSenderIdentityWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/rerequest";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RerequestSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public async Task RerequestSenderIdentityAsync(string email)
        {
            await this.RerequestSenderIdentityAsyncWithHttpInfo(email).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<object>> RerequestSenderIdentityAsyncWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/rerequest";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Post, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("RerequestSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public void DeleteSenderIdentity(string email)
        {
            this.DeleteSenderIdentityWithHttpInfo(email);
        }

        /// <inheritdoc/>
        public ApiResponse<object> DeleteSenderIdentityWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <inheritdoc/>
        public async Task DeleteSenderIdentityAsync(string email)
        {
            await this.DeleteSenderIdentityAsyncWithHttpInfo(email).ConfigureAwait(false);
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<object>> DeleteSenderIdentityAsyncWithHttpInfo(string email)
        {
            if (string.IsNullOrEmpty(email) || !IsValidEmail(email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }

            var localVarPath = "/v1/senderIdentities/delete";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                    "application/json",
            };

            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "email", email)); // query parameter

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Delete, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("DeleteSenderIdentity", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<object>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                null);
        }

        /// <summary>
        /// Validate Email.
        /// </summary>
        /// <param name="email">Email Id.</param>
        /// <returns>True if the email is valid.</returns>
        /// https://docs.microsoft.com/en-us/dotnet/standard/base-types/how-to-verify-that-strings-are-in-valid-email-format
#pragma warning disable SA1204 // Static elements should appear before instance elements
        public static bool IsValidEmail(string email)
#pragma warning restore SA1204 // Static elements should appear before instance elements
        {
            if (string.IsNullOrWhiteSpace(email))
            {
                return false;
            }

            try
            {
                // Normalize the domain
                email = Regex.Replace(
                    email,
                    @"(@)(.+)$",
                    DomainMapper,
                    RegexOptions.None,
                    TimeSpan.FromMilliseconds(200));

                // Examines the domain part of the email and normalizes it.
                string DomainMapper(Match match)
                {
                    // Use IdnMapping class to convert Unicode domain names.
                    var idn = new IdnMapping();

                    // Pull out and process domain name (throws ArgumentException on invalid)
                    var domainName = idn.GetAscii(match.Groups[2].Value);

                    return match.Groups[1].Value + domainName;
                }
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
            catch (ArgumentException)
            {
                return false;
            }

            try
            {
                return Regex.IsMatch(
                    email,
#pragma warning disable SA1118 // Parameter should not span multiple lines
                    @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))"
                    + @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
#pragma warning restore SA1118 // Parameter should not span multiple lines
                    RegexOptions.IgnoreCase,
                    TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }

        /// <inheritdoc/>
        public SenderIdentityList ListSenderIdentities(int page, int? pageSize = default, string search = default, List<string> brandIds = default)
        {
            var localVarResponse = this.ListSenderIdentitiesWithHttpInfo(page, pageSize, search, brandIds);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public ApiResponse<SenderIdentityList> ListSenderIdentitiesWithHttpInfo(int page, int? pageSize = default, string search = default, List<string> brandIds = default)
        {
            // verify the required parameter 'page' is set
            var localVarPath = "/v1/senderIdentities/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "PageSize", pageSize)); // query parameter
            }

            if (search != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Search", search)); // query parameter
            }

            if (brandIds != null && brandIds.Any())
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "BrandIds", brandIds)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = this.Configuration.ApiClient.CallApi(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListSenderIdentities", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<SenderIdentityList>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SenderIdentityList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderIdentityList)));
        }

        /// <inheritdoc/>
        public async Task<SenderIdentityList> ListSenderIdentitiesAsync(int page, int? pageSize = default, string search = default, List<string> brandIds = default)
        {
            var localVarResponse = await this.ListSenderIdentitiesAsyncWithHttpInfo(page, pageSize, search, brandIds).ConfigureAwait(false);

            return localVarResponse.Data;
        }

        /// <inheritdoc/>
        public async Task<ApiResponse<SenderIdentityList>> ListSenderIdentitiesAsyncWithHttpInfo(int page, int? pageSize = default, string search = default, List<string> brandIds = default)
        {
            // verify the required parameter 'page' is set
            var localVarPath = "/v1/senderIdentities/list";
            var localVarQueryParams = new List<KeyValuePair<string, string>>();
            var localVarHeaderParams = new Dictionary<string, string>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, List<IDocumentFile>>();
            var localVarFileUrlParams = new Dictionary<string, Uri>();
            object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = Enumerable.Empty<string>().ToArray();
            var localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[]
            {
                "application/json",
            };
            var localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Page", page)); // query parameter

            if (pageSize != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "PageSize", pageSize)); // query parameter
            }

            if (search != null)
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs(string.Empty, "Search", search)); // query parameter
            }

            if (brandIds != null && brandIds.Any())
            {
                localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("multi", "BrandIds", brandIds)); // query parameter
            }

            // authentication (Bearer) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            using var localVarResponse = await this.Configuration.ApiClient.CallApiAsync(localVarPath, HttpMethod.Get, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams, localVarHttpContentType, localVarFileUrlParams).ConfigureAwait(false);

            var localVarStatusCode = (int)localVarResponse.StatusCode;

            var exception = this.ExceptionFactory?.Invoke("ListSenderIdentities", localVarResponse);

            if (exception != null)
            {
                throw exception;
            }

            return new ApiResponse<SenderIdentityList>(
                localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Key, x => string.Join(",", x.Value)),
                (SenderIdentityList)this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(SenderIdentityList)));
        }

        private static void ValidateCreateSenderIdentityProperties(SenderIdentityRequest senderIdentityRequest)
        {
            if (string.IsNullOrEmpty(senderIdentityRequest.Name))
            {
                 throw new ApiException(422, ApiValidationMessages.RequiredName);
            }

            if (!IsValidEmail(senderIdentityRequest.Email))
            {
                 throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }
        }

        private static void ValidateEditSenderIdentityProperties(SenderIdentityRequest editSenderIdentityRequest)
        {
            if (string.IsNullOrEmpty(editSenderIdentityRequest.Name) &&
                string.IsNullOrEmpty(editSenderIdentityRequest.RedirectUrl?.ToString()))
            {
                throw new ApiException(422, ApiValidationMessages.RequiredNameOrRedirectUrl);
            }

            if (!IsValidEmail(editSenderIdentityRequest.Email))
            {
                throw new ApiException(422, ApiValidationMessages.InvalidEmailAddress);
            }
        }
    }
}
