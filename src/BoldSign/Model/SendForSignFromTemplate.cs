/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using BoldSign.Api.Model;
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using Newtonsoft.Json;

    /// <summary>
    ///     Return send for signature template details in which the document is in the form of.
    /// </summary>
    [DataContract]
    public class SendForSignFromTemplate
    {
        /// <summary>
        ///     Initializes a new instance of the <see cref="SendForSignFromTemplate" /> class.
        /// </summary>
        /// <param name="templateId">Gets or sets the document id..</param>
        /// <param name="title">Gets or sets the title..</param>
        /// <param name="message">Gets or sets the message..</param>
        /// <param name="roles">Gets or sets the roles..</param>
        /// <param name="brandId">Gets or sets the brandId..</param>
        /// <param name="labels">Gets or sets the labels.</param>
        /// <param name="disableEmails">Gets or sets the disableEmails.</param>
        /// <param name="hideDocumentId">Gets or sets the hideDocumentId.</param>
        /// <param name="reminderSettings">Gets or sets the reminderSettings.</param>
        /// <param name="cc">Gets or sets the cc.</param>
        /// <param name="expiryDays">Gets or sets the expiryDays.</param>
        /// <param name="expiryValue">Gets or sets the expiry value based on expiry date type.</param>
        /// <param name="expiryDateType">Gets or sets the expiry date type.</param>
        /// <param name="disableExpiryAlert">Gets or sets the disableExpiryAlert.</param>
        /// <param name="enablePrintAndSign">Gets or sets the enablePrintAndSign.</param>
        /// <param name="enableReassign">Gets or sets the enableReassign.</param>
        /// <param name="enableSigningOrder">Gets or sets the enableSigningOrder.</param>
        /// <param name="documentInfo">Gets or sets the documentInfo.</param>
        /// <param name="roleRemovalIndices">Gets or sets the role removal indices.</param>
        /// <param name="documentDownloadOption">Gets or sets the document download option.</param>
        public SendForSignFromTemplate(
            string templateId = default,
            string title = default,
            string message = default,
            List<Roles> roles = default,
            string brandId = default,
            List<string> labels = default,
            bool disableEmails = default,
            bool? hideDocumentId = default,
            ReminderSettings reminderSettings = default,
            IEnumerable<DocumentCC> cc = default,
            int expiryDays = default,
            long expiryValue = 60,
            ExpiryDateType? expiryDateType = default,
            bool? disableExpiryAlert = default,
            bool enablePrintAndSign = default,
            bool? enableReassign = default,
            bool? enableSigningOrder = default,
            IEnumerable<DocumentInfo> documentInfo = default,
            string onBehalfOf = default,
            int[] roleRemovalIndices = default,
            DocumentDownloadOption? documentDownloadOption = default)
        {
            this.TemplateId = templateId;
            this.Title = title;
            this.Message = message;
            this.Roles = roles;
            this.TemplateId = templateId;
            this.Title = title;
            this.Message = message;
            this.Roles = roles;
            this.BrandId = brandId;
            this.Labels = labels;
            this.DisableEmails = disableEmails;
            this.HideDocumentId = hideDocumentId;
            this.ReminderSettings = reminderSettings;
            this.CC = cc;
            this.ExpiryDays = expiryDays;
            this.ExpiryValue = expiryValue;
            this.ExpiryDateType = expiryDateType;
            this.DisableExpiryAlert = disableExpiryAlert;
            this.EnablePrintAndSign = enablePrintAndSign;
            this.EnableReassign = enableReassign;
            this.EnableSigningOrder = enableSigningOrder;
            this.DocumentInfo = documentInfo;
            this.OnBehalfOf = onBehalfOf;
            this.RoleRemovalIndices = roleRemovalIndices;
            this.DocumentDownloadOption = documentDownloadOption;
        }

        /// <summary>
        ///     Gets or sets the template Id.
        /// </summary>
        /// <value>Gets or sets the document id.</value>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string TemplateId { get; set; }

        /// <summary>
        ///     Gets or sets title for the signature request.
        /// </summary>
        /// <value>Gets or sets the title.</value>
        [DataMember(Name = "title", EmitDefaultValue = true)]
        public string Title { get; set; }

        /// <summary>
        ///     Gets or sets common message for all the document recipients.
        /// </summary>
        /// <value>Gets or sets the message.</value>
        [DataMember(Name = "message", EmitDefaultValue = true)]
        public string Message { get; set; }

        /// <summary>
        ///     Gets or sets the signer roles in a template of the document.
        /// </summary>
        /// <value>Gets or sets the roles.</value>
        [DataMember(Name = "roles", EmitDefaultValue = true)]
        public List<Roles> Roles { get; set; }

        /// <summary>
        /// Gets or sets the brand id.
        /// </summary>
        [DataMember(Name = "brandId", EmitDefaultValue = true)]
        public string BrandId { get; set; }

        /// <summary>
        /// Gets or sets the labels.
        /// </summary>
        [DataMember(Name = "labels", EmitDefaultValue = true)]
        public List<string> Labels { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to enable or disable emails.When disable emails is set to true, all the status emails and completed document email will be stopped, and reminder is also automatically ignored.
        /// </summary>
        [DataMember(Name = "disableEmails", EmitDefaultValue = true)]
        public bool DisableEmails { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable SMS notification.When disable sms is set to true, all the status sms and completed document sms will be stopped, and reminder is also automatically ignored.
        /// </summary>
        [DataMember(Name ="disableSMS", EmitDefaultValue = true)]
        public bool DisableSMS { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to remove the document ID watermark from all the PDF pages of the document.
        /// Default is false.
        /// </summary>
        [DataMember(Name = "hideDocumentId", EmitDefaultValue = true)]
        public bool? HideDocumentId { get; set; }

        /// <summary>
        /// Gets or sets the reminder settings for the signature request.
        /// </summary>
        [DataMember(Name = "reminderSettings", EmitDefaultValue = true)]
        public ReminderSettings ReminderSettings { get; set; }

        /// <summary>
        ///     Gets or sets document CC details.
        /// </summary>
        [DataMember(Name = "cc", EmitDefaultValue = true)]
        public IEnumerable<DocumentCC> CC { get; set; }

        /// <summary>
        /// Gets or sets the expiry date type.
        /// </summary>
        [DataMember(Name = "expiryDateType", EmitDefaultValue = false)]
        public ExpiryDateType? ExpiryDateType { get; set; }

        /// <summary>
        ///  Gets or sets number of days after which the document will expire.
        /// </summary>
        [Obsolete("ExpiryDays is deprecated, please use ExpiryValue instead.")]
        [DataMember(Name = "expiryDays", EmitDefaultValue = true)]
        public int ExpiryDays { get; set; }

        /// <summary>
        ///  Gets or sets the value when the document should get expired.
        /// </summary>
        [DataMember(Name = "expiryValue", EmitDefaultValue = false)]
        public long ExpiryValue { get; set; } = 60;

        /// <summary>
        ///  Gets or sets a value indicating whether Disableexpiryalert is true or false.
        ///  This property will send the expiry alert email before the day of expiry for the pending signers.
        ///  If the document expires in one day, the email will be sent before 2 hours of the expiry.
        /// </summary>
        [DataMember(Name = "disableExpiryAlert", EmitDefaultValue = true)]
        public bool? DisableExpiryAlert { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to enable print and sign mode.
        /// </summary>
        [DataMember(Name = "enablePrintAndSign", EmitDefaultValue = true)]
        public bool EnablePrintAndSign { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to enable reassign mode.
        ///  By Default True.
        /// </summary>
        [DataMember(Name = "enableReassign", EmitDefaultValue = true)]
        public bool? EnableReassign { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable signing order for the document signer.
        /// </summary>
        [DataMember(Name = "enableSigningOrder", EmitDefaultValue = true)]
        public bool? EnableSigningOrder { get; set; }

        /// <summary>
        /// Gets or sets a documentInfo.
        /// </summary>
        [JsonProperty("documentInfo")]
        public IEnumerable<DocumentInfo> DocumentInfo { get; set; }

        /// <summary>
        /// Gets or sets the on behalf of mail id.
        /// </summary>
        [DataMember(Name = "onBehalfOf", EmitDefaultValue = true)]
        public string OnBehalfOf { get; set; }

        /// <summary>
        /// Gets or sets the role removal indices which starts from 1. For example, if you want to remove role 2 and 3 the input should be new []{2,3}.
        /// </summary>
        [DataMember(Name = "roleRemovalIndices", EmitDefaultValue = false)]
        public int[] RoleRemovalIndices { get; set; }

        /// <summary>
        /// Gets or sets a value to customize how the documents are downloaded.
        /// </summary>
        [DataMember(Name = "documentDownloadOption", EmitDefaultValue = true)]
        public DocumentDownloadOption? DocumentDownloadOption { get; set; }

        /// <summary>
        /// Gets or sets the Recipient Notification Settings.
        /// </summary>
        [JsonProperty("recipientNotificationSettings")]
        [Display(Description = "Recipient Notification Settings of the Template.")]
        public RecipientNotificationSettings RecipientNotificationSettings { get; set; }

        /// <summary>
        /// Gets or sets remove form fields id.
        /// </summary>
        [DataMember(Name = "removeFormFields", EmitDefaultValue = false)]
        public List<string> RemoveFormFields { get; set; }

        /// <summary>
        ///     Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}
