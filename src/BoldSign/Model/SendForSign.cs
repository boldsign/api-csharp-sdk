/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Runtime.Serialization;
    using BoldSign.Api.Model;
    using Newtonsoft.Json;

    /// <summary>
    ///     Send for Sign request DTO.
    /// </summary>
    [DataContract(Name = "SendForSignRequest")]
    public class SendForSign : IDocumentUpload
    {
        /// <summary>
        ///  Gets or sets the files to be uploaded.
        /// </summary>
        [Required]
        [JsonProperty("files")]
        public List<IDocumentFile> Files { get; set; } = new List<IDocumentFile>();

        /// <summary>
        ///  Gets or sets title for the signature request.
        /// </summary>
        [JsonProperty("title")]
        public string Title { get; set; }

        /// <summary>
        ///   Gets or sets common message for all the document recipients.
        /// </summary>
        [JsonProperty("message")]
        public string Message { get; set; }

        /// <summary>
        ///     Gets or sets document Signers details.
        /// </summary>
        [Required]
        public IEnumerable<DocumentSigner> Signers { get; set; }

        /// <summary>
        ///     Gets or sets document CC details.
        /// </summary>
        [JsonProperty("cc")]
        public IEnumerable<DocumentCC> CC { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable signing order for the document signer.
        /// </summary>
        public bool EnableSigningOrder { get; set; }

        /// <summary>
        /// Gets or sets the expiry date type.
        /// </summary>
        [JsonProperty("expiryDateType")]
        public ExpiryDateType ExpiryDateType { get; set; }

        /// <summary>
        ///  Number of days after which the document will expire.
        /// </summary>
        [Obsolete("ExpiryDays is deprecated, please use ExpiryValue instead.")]
        [JsonProperty("expiryDays")]
        public int ExpiryDays { get; set; }

        /// <summary>
        ///  Gets or sets the expiry value based on expiry date type.
        /// </summary>
        [JsonProperty("expiryValue")]
        public long ExpiryValue { get; set; } = 60;

        /// <summary>
        /// Gets or sets the reminder settings for the signature request.
        /// </summary>
        [JsonProperty("reminderSettings")]
        public ReminderSettings ReminderSettings { get; set; }

        /// <summary>
        ///     Gets or sets a value indicating whether to enable EnableEmbeddedSigning.
        ///     When EnableEmbeddedSigning is enabled, Reminder is automatically ignored.
        /// </summary>
        [Obsolete("EnableEmbeddedSigning is deprecated, please use DisableEmails instead")]
        [JsonProperty("EnableEmbeddedSigning")]
        public bool EnableEmbeddedSigning { get; set; }

        /// <summary>
        /// Gets or sets the File URLs to be uploaded.
        /// </summary>
        [JsonProperty("fileUrls")]
        public List<Uri> FileUrls { get; set; } = new List<Uri>();

        /// <summary>
        ///     Gets or sets a value indicating whether to enable DisableEmails.
        ///     When DisableEmails is enabled, Reminder is automatically ignored.
        /// </summary>
        [JsonProperty("disableEmails")]
        public bool DisableEmails { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable SMS notification.
        /// When DisableSMS is enabled, Reminder is automatically ignored.
        /// </summary>
        [JsonProperty("disableSMS")]
        public bool DisableSMS { get; set; }

        /// <summary>
        /// Gets or sets the brand id.
        /// </summary>
        [JsonProperty("brandId")]
        public string BrandId { get; set; }

        /// <summary>
        /// Gets or sets the labels.
        /// </summary>
        [JsonProperty("labels")]
        public List<string> Labels { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to remove the document ID watermark from all the PDF pages of the document.
        /// Default is false.
        /// </summary>
        [JsonProperty("hideDocumentId")]
        public bool? HideDocumentId { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to convert the text tags to form fields.
        /// </summary>
        [JsonProperty("useTextTags")]
        public bool UseTextTags { get; set; }

        /// <summary>
        /// Gets or sets the text tags definitions declared in the list can be used in the document by using the definition ID.
        /// </summary>
        [JsonProperty("textTagDefinitions")]
        public List<TextTagDefinition> TextTagDefinitions { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether Disableexpiryalert is true or false.
        ///  This property will send the expiry alert email before the day of expiry for the pending signers.
        ///  If the document expires in one day, the email will be sent before 2 hours of the expiry.
        /// </summary>
        [JsonProperty("disableExpiryAlert")]
        public bool DisableExpiryAlert { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to enable print and sign mode.
        /// </summary>
        [JsonProperty("enablePrintAndSign")]
        public bool EnablePrintAndSign { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to enable reassign mode.
        ///  By Default True.
        /// </summary>
        [JsonProperty("enableReassign")]
        public bool EnableReassign { get; set; } = true;

        /// <summary>
        /// Gets or sets a documentInfo.
        /// </summary>
        [JsonProperty("documentInfo")]
        public IEnumerable<DocumentInfo> DocumentInfo { get; set; }

        /// <summary>
        /// Gets or sets the on behalf of email address.
        /// </summary>
        [JsonProperty("onBehalfOf")]
        public string OnBehalfOf { get; set; }

        /// <summary>
        ///  Gets or sets a value indicating whether to AutoDetect Fields for the document signer.
        /// </summary>
        public bool AutoDetectFields { get; set; }

        /// <summary>
        /// Gets or sets a value to customize how the documents are downloaded.
        /// </summary>
        [JsonProperty("documentDownloadOption")]
        public DocumentDownloadOption? DocumentDownloadOption { get; set; }

        /// <summary>
        /// Gets or sets the Recipient Notification Settings.
        /// </summary>
        [JsonProperty("recipientNotificationSettings")]
        [Display(Description = "Recipient Notification Settings of the document.")]
        public RecipientNotificationSettings RecipientNotificationSettings { get; set; }
    }
}
