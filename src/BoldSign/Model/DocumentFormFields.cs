/*
 * BoldSign API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace BoldSign.Model
{
    using System;
    using System.Linq;
    using System.IO;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;
    using System.ComponentModel.DataAnnotations;
    using BoldSign.Api.Model;

    /// <summary>
    /// The document form fields properties include, font, font color, font size and so on.
    /// </summary>
    [DataContract]
    public partial class DocumentFormFields
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentFormFields" /> class.
        /// </summary>
        /// <param name="id">Gets or sets the id..</param>
        /// <param name="type">Gets or sets the element type..</param>
        /// <param name="value">Gets or sets the element type..</param>
        /// <param name="font">Gets or sets the element type..</param>
        /// <param name="isRequired">Gets or sets a value indicating whether is required..</param>
        /// <param name="lineHeight">Gets or sets the line height..</param>
        /// <param name="fontSize">Gets or sets the font size..</param>
        /// <param name="fontColor">Gets or sets the font color..</param>
        /// <param name="isUnderline">Gets or sets a value indicating whether isUnderline..</param>
        /// <param name="isItalic">Gets or sets a value indicating whether isItalic..</param>
        /// <param name="isBold">Gets or sets a value indicating whether isBold..</param>
        /// <param name="placeholder">Gets or sets the placeHolder value..</param>
        /// <param name="dateFormat">Gets or sets the dateFormat value..</param>
        /// <param name="validationType">Gets or sets the textbox ValidationType value..</param>
        /// <param name="validationCustomRegex">Gets or sets the textbox ValidationCustomRegex value..</param>
        /// <param name="validationCustomRegexMessage">Gets or sets the textbox ValidationCustomRegexMessage value..</param>
        /// <param name="imageInfo">Gets or sets the imageField.</param>
        /// <param name="attachmentInfo">Gets or sets the attachmentField.</param>
        /// <param name="editableDateFieldSettings">Gets or sets the editableDateFieldSettings.</param>
        /// <param name="dropdownOptions">Gets or sets the dropdownOptions.</param>
        /// <param name="hyperlinkText">Gets or sets the hyperlinkText.</param>
        /// <param name="dataSyncTag">Gets or sets the dataSyncTag.</param>
        /// <param name="fileInfo">Gets or sets the download attachment fileInfo.</param>
        /// <param name="isReadOnly">Gets or sets a value indicating whether is read only mode.</param>
        /// <param name="conditionalRules">Gets or sets the conditionalRules.</param>
        /// <param name="textAlign">Gets or sets the textAlign.</param>
        /// <param name="textDirection">Gets or sets the direction of the text.</param>
        /// <param name="characterSpacing">Gets or sets the space of the character.</param>
        /// <param name="label">Gets or sets the label value.</param>
        /// <param name="timeFormat">Gets or sets the timeFormat value..</param>
        public DocumentFormFields(string id = default(string), string type = default(string), string value = default(string), string font = default(string), bool? isRequired = default(bool?), float? lineHeight = default(float?), float? fontSize = default(float?), string fontColor = default(string), bool? isUnderline = default(bool?), bool? isItalic = default(bool?), bool? isBold = default(bool?), string placeholder = default(string), string dateFormat = default(string), ValidationType validationType = default(ValidationType), string validationCustomRegex = default(string), string validationCustomRegexMessage = default(string), ImageInfo imageInfo = default(ImageInfo), AttachmentInfo attachmentInfo = default(AttachmentInfo), EditableDateFieldSettings editableDateFieldSettings = default(EditableDateFieldSettings), string hyperlinkText = default(string), string dataSyncTag = default(string), Api.Model.FileInfo fileInfo = default(Api.Model.FileInfo), List<string> dropdownOptions = default(List<string>), bool? isReadOnly = default(bool?), List<ConditionalRule> conditionalRules = default(List<ConditionalRule>), TextAlign textAlign = TextAlign.Left, TextDirection textDirection = TextDirection.LTR, float characterSpacing = default, string label = default(string), string timeFormat = default(string))
        {
            this.Id = id;
            this.Type = type;
            this.Value = value;
            this.Font = font;
            this.IsRequired = isRequired;
            this.LineHeight = lineHeight;
            this.FontSize = fontSize;
            this.FontColor = fontColor;
            this.IsUnderline = isUnderline;
            this.IsItalic = isItalic;
            this.IsBold = isBold;
            this.Placeholder = placeholder;
            this.DateFormat = dateFormat;
            this.ValidationType = validationType;
            this.ValidationCustomRegex = validationCustomRegex;
            this.ValidationCustomRegexMessage = validationCustomRegexMessage;
            this.ImageInfo = imageInfo;
            this.AttachmentInfo = attachmentInfo;
            this.EditableDateFieldSettings = editableDateFieldSettings;
            this.HyperlinkText = hyperlinkText;
            this.IsReadOnly = isReadOnly;
            this.DataSyncTag = dataSyncTag;
            this.FileInfo = fileInfo;
            this.DropdownOptions = dropdownOptions;
            this.ConditionalRules = conditionalRules;
            this.TextAlign = textAlign;
            this.TextDirection = textDirection;
            this.CharacterSpacing = characterSpacing;
            this.Label = label;
            this.TimeFormat = timeFormat;
        }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the element type.
        /// </summary>
        /// <value>Gets or sets the element type.</value>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the element type.
        /// </summary>
        /// <value>Gets or sets the element type.</value>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or sets the Font type among the three available types courier, helvetica, times new roman.
        /// </summary>
        /// <value>Gets or sets the element type.</value>
        [DataMember(Name = "font", EmitDefaultValue = false)]
        public string Font { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether is required.
        /// </summary>
        /// <value>Gets or sets a value indicating whether is required.</value>
        [DataMember(Name = "isRequired", EmitDefaultValue = false)]
        public bool? IsRequired { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether is read only mode.
        /// </summary>
        /// <value>Gets or sets a value indicating whether is read only mode.</value>
        [DataMember(Name = "isReadOnly", EmitDefaultValue = false)]
        public bool? IsReadOnly { get; set; }

        /// <summary>
        /// Gets or sets the line height for the content in form fields such as text box.
        /// </summary>
        /// <value>Gets or sets the line height.</value>
        [DataMember(Name = "lineHeight", EmitDefaultValue = false)]
        public float? LineHeight { get; set; }

        /// <summary>
        /// Gets or sets the font size.
        /// </summary>
        /// <value>Gets or sets the font size.</value>
        [DataMember(Name = "fontSize", EmitDefaultValue = false)]
        public float? FontSize { get; set; }

        /// <summary>
        /// Gets or sets the font color.
        /// </summary>
        /// <value>Gets or sets the font color.</value>
        [DataMember(Name = "fontColor", EmitDefaultValue = false)]
        public string FontColor { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether isUnderline.
        /// </summary>
        /// <value>Gets or sets a value indicating whether isUnderline.</value>
        [DataMember(Name = "isUnderline", EmitDefaultValue = false)]
        public bool? IsUnderline { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether isItalic.
        /// </summary>
        /// <value>Gets or sets a value indicating whether isItalic.</value>
        [DataMember(Name = "isItalic", EmitDefaultValue = false)]
        public bool? IsItalic { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether isBold.
        /// </summary>
        /// <value>Gets or sets a value indicating whether isBold.</value>
        [DataMember(Name = "isBold", EmitDefaultValue = false)]
        public bool? IsBold { get; set; }

        /// <summary>
        ///     Gets or sets the group name of a radio field.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name = "groupName", EmitDefaultValue = true)]
        public string GroupName { get; set; }

        /// <summary>
        ///     Gets or sets the Label for radio button fields.
        /// </summary>
        [DataMember(Name = "label", EmitDefaultValue = true)]
        public string Label { get; set; }

        /// <summary>
        /// Gets or sets the placeHolder value.
        /// </summary>
        /// <value>Gets or sets the element type.</value>
        [DataMember(Name = "placeholder", EmitDefaultValue = false)]
        public string Placeholder { get; set; }

        /// <summary>
        /// Gets or sets the DateFormat value.
        /// </summary>
        /// <value>Gets or sets the DateFormat value.</value>
        [DataMember(Name = "dateFormat", EmitDefaultValue = false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Gets or sets the TimeFormat value.
        /// </summary>
        /// <value>Gets the value of TimeFormat.</value>
        [DataMember(Name = "timeFormat", EmitDefaultValue = false)]
        public string TimeFormat { get; set; }

        /// <summary>
        /// Gets or sets the textbox ValidationType value.
        /// </summary>
        [DataMember(Name = "validationType", EmitDefaultValue = false)]
        public ValidationType ValidationType { get; set; }

        /// <summary>
        /// Gets or sets the text ValidationCustomRegex value.
        /// </summary>
        [DataMember(Name = "validationCustomRegex", EmitDefaultValue = false)]
        public string ValidationCustomRegex { get; set; }

        /// <summary>
        /// Gets or sets the text ValidationCustomRegexMessage value.
        /// </summary>
        [DataMember(Name = "validationCustomRegexMessage", EmitDefaultValue = false)]
        public string ValidationCustomRegexMessage { get; set; }

        /// <summary>
        /// Gets or sets the Image Information. .
        /// </summary>
        [DataMember(Name = "imageInfo", EmitDefaultValue = false)]
        public ImageInfo ImageInfo { get; set; }

        /// <summary>
        /// Gets or sets the Attachment Information. .
        /// </summary>
        [DataMember(Name = "attachmentInfo", EmitDefaultValue = false)]
        public AttachmentInfo AttachmentInfo { get; set; }

        /// <summary>
        /// Gets or sets the EditableDateFieldSettings Information. .
        /// </summary>
        [DataMember(Name = "editableDateFieldSettings", EmitDefaultValue = false)]
        public EditableDateFieldSettings EditableDateFieldSettings { get; set; }

        /// <summary>
        /// Gets or sets the element HyperlinkText.
        /// </summary>
        /// <value>Gets the value of element HyperlinkText.</value>
        [DataMember(Name = "hyperlinkText", EmitDefaultValue = false)]
        public string HyperlinkText { get; set; }

        /// <summary>
        /// Gets or sets the bounds.
        /// </summary>
        [DataMember(Name = "bounds", EmitDefaultValue = false)]
        public Rectangle Bounds { get; set; }

        /// <summary>
        /// Gets or sets the pageNumber.
        /// </summary>
        [DataMember(Name = "pageNumber", EmitDefaultValue = false)]
        public int PageNumber { get; set; }

        /// <summary>
        /// Gets or sets the data sync tag value, this property helps to group the similar element types and it's only applicable for textbox, image, dropdown, checkbox fields, it won't affect the other fields.
        /// </summary>
        [DataMember(Name = "dataSyncTag", EmitDefaultValue = false)]
        public string DataSyncTag { get; set; }

        /// <summary>
        /// Gets or sets the file info.
        /// </summary>
        [DataMember(Name = "fileInfo", EmitDefaultValue = false)]
        public Api.Model.FileInfo FileInfo { get; set; }

        /// <summary>
        /// Gets or sets the Dropdown Options.
        /// </summary>
        [DataMember(Name = "dropdownOptions", EmitDefaultValue = false)]
        public List<string> DropdownOptions { get; set; }

        /// <summary>
        /// Gets or sets the conditional rules value, this property helps to frame rules.
        /// </summary>
        [DataMember(Name = "conditionalRules", EmitDefaultValue = false)]
        public List<ConditionalRule> ConditionalRules { get; set; }

        /// <summary>
        /// Gets or sets the textAlign.
        /// </summary>
        [DataMember(Name = "textAlign", EmitDefaultValue = true)]
        public TextAlign TextAlign { get; set; }

        /// <summary>
        /// Gets or sets the direction of the text.
        /// </summary>
        [DataMember(Name = "textDirection", EmitDefaultValue = true)]
        public TextDirection TextDirection { get; set; }

        /// <summary>
        /// Gets or sets the character spacing.
        /// </summary>
        /// <value>Gets the value of character spacing.</value>
        [DataMember(Name = "characterSpacing", EmitDefaultValue = false)]
        public float CharacterSpacing { get; set; }

        /// <summary>
        /// Gets or sets the background hex color.
        /// The BackgroundHexColor property allows you to set the background color of a label field using hexadecimal color codes ("#FF5733"). The default color is transparent or no background color.
        /// Default value is null.
        /// </summary>
        /// <value>Gets the value of backgroundColor.</value>
        [DataMember(Name = "backgroundHexColor", EmitDefaultValue = false)]
        public string BackgroundHexColor { get; set; }

        /// <summary>
        /// Gets or sets the tab index position .
        /// </summary>
        [DataMember(Name = "tabIndex", EmitDefaultValue = true)]
        public int TabIndex { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}
