/*
 * BoldSign API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1
 *
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

namespace BoldSign.Model
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text;
    using Newtonsoft.Json;

    /// <summary>
    ///     The document signer details have properties that shows if the document delivery failed, reassigned, viewed, and so on.
    /// </summary>
    [DataContract]
    public class DocumentSignerDetails
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentSignerDetails" /> class.
        /// </summary>
        /// <param name="signerName">Gets or sets the signer name..</param>
        /// <param name="signerRole">Gets or sets the signer role..</param>
        /// <param name="signerEmail">Gets or sets the signer email..</param>
        /// <param name="status">status.</param>
        /// <param name="isAuthenticationFailed">&lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;br&gt;When value is null, Authentication is not enabled for the signer.  &lt;br&gt;When value is true, Authentication is failed by the signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer. (default to false).</param>
        /// <param name="enableEmailOTP">Gets or sets a value indicating whether email OTP authentication is enabled..</param>
        /// <param name="isDeliveryFailed">Gets or sets a value indicating whether delivery is failed. (default to false).</param>
        /// <param name="isViewed">Gets or sets a value indicating whether is viewed. (default to false).</param>
        /// <param name="order">Gets or sets the order of the signer. (default to 0).</param>
        /// <param name="signerType">signerType.</param>
        /// <param name="isReassigned">Gets or sets a value indicating whether is reassigned..</param>
        /// <param name="privateMessage">&lt;br&gt;Gets or sets private message for the current signer.  &lt;br&gt;Available only when the user is signer and have a privateMessage from sender..</param>
        /// <param name="formFields">Gets or sets the form fields..</param>
        /// <param name="hostEmail">Gets or sets the host email.</param>
        /// <param name="hostName">Gets or sets the host name.</param>
        /// <param name="language">Gets or sets the Language.</param>
        /// <param name="locale">Gets or sets the locale.</param>
        /// <param name="authenticationType">Authentication type.</param>
        /// <param name="phoneNumber">The phone number.</param>
        public DocumentSignerDetails(string signerName = default(string), string signerRole = default(string), string signerEmail = default(string), SignerStatus status = default(SignerStatus), bool? isAuthenticationFailed = false, bool? enableEmailOTP = default(bool?), bool? isDeliveryFailed = false, bool? isViewed = false, int? order = 0, SignerType signerType = default(SignerType), bool? isReassigned = default(bool?), string privateMessage = default(string), List<DocumentFormFields> formFields = default(List<DocumentFormFields>), string hostEmail = default(string), string hostName = default(string), Languages language = Languages.English, string locale = default(string), AuthenticationType authenticationType = AuthenticationType.None, PhoneNumber phoneNumber = default)
        {
            this.SignerName = signerName;
            this.SignerRole = signerRole;
            this.SignerEmail = signerEmail;
            this.Status = status;
            // use default value if no "isAuthenticationFailed" provided
            if (isAuthenticationFailed == null)
            {
                this.IsAuthenticationFailed = false;
            }
            else
            {
                this.IsAuthenticationFailed = isAuthenticationFailed;
            }
            this.EnableEmailOTP = enableEmailOTP;
            // use default value if no "isDeliveryFailed" provided
            if (isDeliveryFailed == null)
            {
                this.IsDeliveryFailed = false;
            }
            else
            {
                this.IsDeliveryFailed = isDeliveryFailed;
            }
            // use default value if no "isViewed" provided
            if (isViewed == null)
            {
                this.IsViewed = false;
            }
            else
            {
                this.IsViewed = isViewed;
            }
            // use default value if no "order" provided
            if (order == null)
            {
                this.Order = 0;
            }
            else
            {
                this.Order = order;
            }
            this.SignerType = signerType;
            this.IsReassigned = isReassigned;
            this.PrivateMessage = privateMessage;
            this.FormFields = formFields;
            this.HostEmail = hostEmail;
            this.HostName = hostName;
            this.Language = language;
            this.Locale = locale;
            this.AuthenticationType = authenticationType;
            this.PhoneNumber = phoneNumber;
        }

        /// <summary>
        /// Gets or sets the signer name.
        /// </summary>
        /// <value>Gets or sets the signer name.</value>
        [DataMember(Name = "signerName", EmitDefaultValue = false)]
        public string SignerName { get; set; }

        /// <summary>
        /// Gets or sets the signer role.
        /// </summary>
        /// <value>Gets or sets the signer role.</value>
        [DataMember(Name = "signerRole", EmitDefaultValue = false)]
        public string SignerRole { get; set; }

        /// <summary>
        /// Gets or sets the signer email.
        /// </summary>
        /// <value>Gets or sets the signer email.</value>
        [DataMember(Name = "signerEmail", EmitDefaultValue = false)]
        public string SignerEmail { get; set; }

        /// <summary>
        /// Gets or Sets signer status.
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public SignerStatus Status { get; set; }

        /// <summary>
        /// Gets a value indicating whether authentication is enabled for the signer.
        /// </summary>
        /// <value>Gets a value indicating whether authentication is enabled for the signer.</value>
        [DataMember(Name = "enableAccessCode", EmitDefaultValue = false)]
        public bool? EnableAccessCode { get; private set; }

        /// <summary>
        /// &lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;br&gt;When value is null, Authentication is not enabled for the signer.  &lt;br&gt;When value is true, Authentication is failed by the signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer.
        /// </summary>
        /// <value>&lt;br&gt;Gets or sets a value indicating whether authentication is failed.  &lt;br&gt;When value is null, Authentication is not enabled for the signer.  &lt;br&gt;When value is true, Authentication is failed by the signer.  &lt;br&gt;When value is false, Authentication is enabled for the signer.</value>
        [DataMember(Name = "isAuthenticationFailed", EmitDefaultValue = false)]
        public bool? IsAuthenticationFailed { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether email OTP authentication is enabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether email OTP authentication is enabled.</value>
        [DataMember(Name = "enableEmailOTP", EmitDefaultValue = false)]
        public bool? EnableEmailOTP { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether delivery is failed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether delivery is failed.</value>
        [DataMember(Name = "isDeliveryFailed", EmitDefaultValue = false)]
        public bool? IsDeliveryFailed { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether document is viewed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether is viewed.</value>
        [DataMember(Name = "isViewed", EmitDefaultValue = false)]
        public bool? IsViewed { get; set; }

        /// <summary>
        /// Gets or sets the order of the signers.
        /// </summary>
        /// <value>Gets or sets the order of the signer.</value>
        [DataMember(Name = "order", EmitDefaultValue = false)]
        public int? Order { get; set; }

        /// <summary>
        /// Gets or Sets SignerType.
        /// </summary>
        [DataMember(Name = "signerType", EmitDefaultValue = false)]
        public SignerType SignerType { get; set; }

        /// <summary>
        /// Gets or sets the host email.
        /// </summary>
        /// <value>Gets the value of host email.</value>
        [DataMember(Name = "hostEmail", EmitDefaultValue = false)]
        public string HostEmail { get; set; }

        /// <summary>
        /// Gets or sets the host name.
        /// </summary>
        /// <value>Gets the value of host name.</value>
        [DataMember(Name = "hostName", EmitDefaultValue = false)]
        public string HostName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether document signer is reassigned.
        /// </summary>
        /// <value>Gets or sets a value indicating whether is reassigned.</value>
        [DataMember(Name = "isReassigned", EmitDefaultValue = false)]
        public bool? IsReassigned { get; set; }

        /// <summary>
        /// &lt;br&gt;Gets or sets private message for the current signer.  &lt;br&gt;Available only when the user is signer and has a privateMessage from sender.
        /// </summary>
        /// <value>&lt;br&gt;Gets or sets private message for the current signer.  &lt;br&gt;Available only when the user is signer and have a private message from sender.</value>
        [DataMember(Name = "privateMessage", EmitDefaultValue = false)]
        public string PrivateMessage { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether gets or sets the allow field configuration.
        /// </summary>
        /// <value>Gets or sets a value indicating whether gets or sets the allow field configuration.</value>
        [DataMember(Name = "allowFieldConfiguration", EmitDefaultValue = false)]
        public bool AllowFieldConfiguration { get; set; }

        /// <summary>
        /// Gets or sets the form fields in the document.
        /// </summary>
        /// <value>Gets or sets the form fields.</value>
        [DataMember(Name = "formFields", EmitDefaultValue = false)]
        public List<DocumentFormFields> FormFields { get; set; }

        /// <summary>
        /// Gets or sets Languages such as English, French, Spanish, German.
        /// </summary>
        [DataMember(Name = "language", EmitDefaultValue = true)]
        [Obsolete("language is deprecated, please use locale instead")]
        public Languages Language { get; set; }

        /// <summary>
        /// Gets or sets the locale.
        /// </summary>
        /// <value>Gets the value of locale.</value>
        [DataMember(Name = "locale", EmitDefaultValue = false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or sets a value of authentication type.
        /// </summary>
        /// <value>Gets or sets the authentication type.</value>
        [DataMember(Name = "authenticationType", EmitDefaultValue = false)]
        public AuthenticationType AuthenticationType { get; set; }

        /// <summary>
        /// Gets or sets the phone number.
        /// </summary>
        /// <value>Gets or sets phone number.</value>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public PhoneNumber PhoneNumber { get; set; }

        /// <summary>
        /// Gets or sets the Recipient Notification Settings.
        /// </summary>
        /// <value>Gets or sets the Recipient Notification Settings of the signer.</value>
        [DataMember(Name = "recipientNotificationSettings", EmitDefaultValue = false)]
        public RecipientNotificationSettings RecipientNotificationSettings { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }
    }
}