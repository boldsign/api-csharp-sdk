// <copyright file="IdVerification.cs" company="Syncfusion Inc">
// Copyright (c) Syncfusion Inc. All rights reserved.
// </copyright>

/*
* BoldSign API
*
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1
*
* Generated by: https://github.com/openapitools/openapi-generator.git
*/

namespace BoldSign.Model.IdVerification
{
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The id verification details.
    /// </summary>
    public class IdVerification
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdVerification" /> class.
        /// </summary>
        /// <param name="type">Gets or sets the identity verification type.</param>
        /// <param name="maximumRetryCount">Gets or sets the maximum retry count.</param>
        /// <param name="status">Gets or sets the status.</param>
        /// <param name="nameMatcher">Gets or sets the name matcher.</param>
        /// <param name="requireLiveCapture">Gets or sets the require live capture.</param>
        /// <param name="requireMatchingSelfie">Gets or sets the require matching selfie.</param>
        public IdVerification(
            string type = default,
            int? maximumRetryCount = default,
            string status = default,
            string nameMatcher = default,
            bool? requireLiveCapture = default,
            bool? requireMatchingSelfie = default)
        {
            this.Type = type;
            this.MaximumRetryCount = maximumRetryCount;
            this.Status = status;
            this.NameMatcher = nameMatcher;
            this.RequireLiveCapture = requireLiveCapture;
            this.RequireMatchingSelfie = requireMatchingSelfie;
        }

        /// <summary>
        /// Gets or sets the type of id verification.
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or sets the number of retries.
        /// </summary>
        [DataMember(Name = "maximumRetryCount", EmitDefaultValue = false)]
        public int? MaximumRetryCount { get; set; }

        /// <summary>
        /// Gets or sets the status.
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets a name matcher.
        /// </summary>
        [DataMember(Name = "nameMatcher", EmitDefaultValue = false)]
        public string NameMatcher { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether require live capture (Disable image file upload).
        /// </summary>
        [DataMember(Name = "requireLiveCapture", EmitDefaultValue = false)]
        public bool? RequireLiveCapture { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether require matching selfie (Selfie and document image should match).
        /// </summary>
        [DataMember(Name = "requireMatchingSelfie", EmitDefaultValue = false)]
        public bool? RequireMatchingSelfie { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether we can hold the signing until sender prefilled form fields.
        /// </summary>
        [DataMember(Name = "holdForPrefill", EmitDefaultValue = false)]
        public bool? HoldForPrefill { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether sender prefilled form fields or not.
        /// </summary>
        [DataMember(Name = "prefillCompleted", EmitDefaultValue = false)]
        public bool? PrefillCompleted { get; set; }

        /// <summary>
        /// Returns the JSON string presentation of the object.
        /// </summary>
        /// <returns>JSON string presentation of the object.</returns>
        public virtual string ToJson() => JsonConvert.SerializeObject(this, Formatting.Indented);
    }
}
